<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">DevPower</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://devpower.co.uk/feed.xml" />
<link rel="alternate" type="text/html" href="https://devpower.co.uk" />
<updated>2021-12-08T11:30:33+00:00</updated>
<id>https://devpower.co.uk/</id>
<author>
  <name>Volkan Paksoy</name>
  <uri>https://devpower.co.uk/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[Developing a custom monitoring tool in C# for SpacePool Chia cryptocurrency farming]]></title>
 <link rel="alternate" type="text/html" href="https://devpower.co.uk/cryptocurrency/monitoring-chia-spacepool/" />
  <id>https://devpower.co.uk/cryptocurrency/monitoring-chia-spacepool</id>
  <published>2021-12-08T00:00:00+00:00</published>
  <updated>2021-12-08T00:00:00+00:00</updated>
  <author>
    <name>Volkan Paksoy</name>
    <uri>https://devpower.co.uk</uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;If you are one of the crypto early adopters, the chances are that you’ve heard about a new cryptocurrency called &lt;a href=&quot;https://chia.net&quot;&gt;Chia&lt;/a&gt;. In this post, we will develop a simple monitoring tool to send alerts if Chia farming stops. We are going to use SpacePool’s Developer API to achieve this.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The best resource to get started is SpacePool’s own &lt;a href=&quot;https://blog.pool.space/how-to-get-started-with-space-pool-developer-apis-915b153b2c40&quot;&gt;blog post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, we will need an API key and as of this writing, obtaining a key is a manual process. You have to explain your use case in their Discord server by answering a list of fixed questions (listed in the blog post), and you’ll get a private message with your key.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-key&quot;&gt;Testing the key&lt;/h3&gt;
&lt;p&gt;The easiest way to test your setup is to visit the &lt;a href=&quot;https://developer.pool.space/&quot;&gt;API reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter your launcher id, API key and some value for User-Agent. Then, when you click the Try It Out button, you should be able to see some results as shown in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post-images/2021/12/spacepool/api-reference-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;developing-a-custom-application&quot;&gt;Developing a custom application&lt;/h2&gt;

&lt;p&gt;It’s a REST API with OpenAPI specs at https://developer.pool.space/api/v1/docs/openapi.json. I used this to generate my C# client:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${PWD}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/local&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openapitools/openapi-generator-cli&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https://developer.pool.space/api/v1/docs/openapi.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csharp-netcore&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/local/csharp-netcore&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generated project has the API clients for the endpoints:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post-images/2021/12/spacepool/auto-generated-api-client.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For monitoring purposes, we are interested in the GetFarmPartialsV1Api endpoint.&lt;/p&gt;

&lt;p&gt;Here’s my simple console application that calls the endpoint and checks if the latest verified submission happened within an expected timeframe:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launcherId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{launcher id}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{api key}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{custom user agent}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetFarmPartialsV1Api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ApiV1FarmsLauncherIdOrAliasPartialsGetAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launcherId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latestSuccessfulSubmission&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OrderByDescending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubmissionDateTimeUtc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Verified&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latestSuccessfulSubmission&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No verified partials&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Send an alert somewhere &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeElapsedSinceLastVerifiedPartial&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UtcNow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latestSuccessfulSubmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubmissionDateTimeUtc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeElapsedSinceLastVerifiedPartial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMinutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;No verified partials in the last &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; minutes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Send an alert somewhere &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Last verified partial received &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeElapsedSinceLastVerifiedPartial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; minutes ago. All looking good.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and after we run the application, we can see it checks the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post-images/2021/12/spacepool/test-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post, we looked into generating API clients automatically from an OpenAPI spec. Then used the client to talk to the SpacePool API and get some information about our Chia farm.&lt;/p&gt;

&lt;p&gt;I left out sending the actual alerts as they are open-ended, and anyone can customize them to fit their system. In the future, I might post a complete Dockerized solution so that the deployment can be as simple as running a container and providing it with the launcher id and API key.&lt;/p&gt;

&lt;p&gt;Let me know if this is of any interest to you to prioritize it over other content.&lt;/p&gt;

&lt;p&gt;Happy farming!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pool.space&quot;&gt;SpacePool official website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.pool.space/&quot;&gt;SpacePool API reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.pool.space/how-to-get-started-with-space-pool-developer-apis-915b153b2c40&quot;&gt;SpacePool blog post on getting started with the API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chia.net&quot;&gt;Chia official website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://devpower.co.uk/cryptocurrency/monitoring-chia-spacepool/&quot;&gt;Developing a custom monitoring tool in C# for SpacePool Chia cryptocurrency farming&lt;/a&gt; was originally published by Volkan Paksoy at &lt;a href=&quot;https://devpower.co.uk&quot;&gt;DevPower&lt;/a&gt; on December 08, 2021.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Blogging with Jekyll and Docker]]></title>
 <link rel="alternate" type="text/html" href="https://devpower.co.uk/docker/blogging-with-Jekyll-and-Docker/" />
  <id>https://devpower.co.uk/docker/blogging-with-Jekyll-and-Docker</id>
  <published>2021-11-16T00:00:00+00:00</published>
  <updated>2021-11-16T00:00:00+00:00</updated>
  <author>
    <name>Volkan Paksoy</name>
    <uri>https://devpower.co.uk</uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;I think the best option for a blog is a static website. I love blogging using Jekyll for that reason. Just write your posts in markdown and create a static website out of it so that you can host everywhere for either free or a very affordable price.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/company-logos/jekyll-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far my local development environment for my blog was a MacBook Pro and everything installed on bare-metal. By everything I mean Jekyll and all its dependencies such as Ruby. I’m not a Ruby developer myself and when something breaks it’s hard to figure out how to fix it.&lt;/p&gt;

&lt;p&gt;You might think once you set it up, you don’t need to change much. It’s true in general with the exception of macOS updates. In the recent years, after almost every major OS upgrade I found out my blogging environment was broken. To mitigate this, I decided to use Docker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/company-logos/docker-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;create-your-blog&quot;&gt;Create your blog&lt;/h1&gt;
&lt;p&gt;In this post, I’m going to assume you don’t already have a Jekyll blog. Creating a new one is very easy as shown in the official Jekyll &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler jekyll
jekyll new my-awesome-site
cd my-awesome-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we don’t want to install anything on our system, we are not going to use the first command and go straight to creating the site from within a Docker container like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -v &quot;${PWD}:/srv/jekyll&quot; jekyll/jekyll /bin/bash -c &quot;jekyll new my-awesome-site&quot;
cd my-awesome-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We only have to do this once to initialize our blog. After that each time we want to run it locally for testing purposes, we can simply run this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -v &quot;${PWD}:/srv/jekyll&quot; -p 4000:4000 -it jekyll/jekyll /bin/bash -c &quot;jekyll serve --drafts --trace&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the current directory is mounted so make sure you are in the correct directory (which is root of your blog) before you tun this command.&lt;/p&gt;

&lt;p&gt;And that’s all there is to it!. Just navigate to 127.0.0.1:4000 on your machine to confirm it’s working and get cranking.&lt;/p&gt;

&lt;p&gt;Happy blogging!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Moral of the story is: Never install anything on bare-metal! Ever again!&lt;/p&gt;

&lt;p&gt;This is my biggest takeaway from all the containerized application movement. Every time my development environment broke because of an unrelated change in the OS, I regretted not doing this earlier. No more!&lt;/p&gt;

&lt;p&gt;Here’s how to create a full Jekyll development environment for your blog:&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll official website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://devpower.co.uk/docker/blogging-with-Jekyll-and-Docker/&quot;&gt;Blogging with Jekyll and Docker&lt;/a&gt; was originally published by Volkan Paksoy at &lt;a href=&quot;https://devpower.co.uk&quot;&gt;DevPower&lt;/a&gt; on November 16, 2021.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello, World!]]></title>
 <link rel="alternate" type="text/html" href="https://devpower.co.uk/intro/hello-world/" />
  <id>https://devpower.co.uk/intro/hello-world</id>
  <published>2021-10-04T00:00:00+01:00</published>
  <updated>2021-10-04T00:00:00+01:00</updated>
  <author>
    <name>Volkan Paksoy</name>
    <uri>https://devpower.co.uk</uri>
    <email></email>
  </author>
  <content type="html">
    &lt;p&gt;Hello to everyone reading this! From a new blog, hello!&lt;/p&gt;

&lt;p&gt;This blog will be the place where I publish software development, DevOps and infrastructure and cloud (primarily AWS) posts.&lt;/p&gt;

&lt;p&gt;We’re just getting started, so stay tuned; it’s going to be a fun journey!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://devpower.co.uk/intro/hello-world/&quot;&gt;Hello, World!&lt;/a&gt; was originally published by Volkan Paksoy at &lt;a href=&quot;https://devpower.co.uk&quot;&gt;DevPower&lt;/a&gt; on October 04, 2021.&lt;/p&gt;
  </content>
</entry>

</feed>
